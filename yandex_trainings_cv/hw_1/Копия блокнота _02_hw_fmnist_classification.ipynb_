{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"3isBRG6PgSq6"},"outputs":[],"source":["# do not change the code in the block below\n","# __________start of block__________\n","import json\n","import os\n","import re\n","\n","import numpy as np\n","import torch\n","import torchvision\n","from IPython.display import clear_output\n","from matplotlib import pyplot as plt\n","from torch import nn\n","from torch.nn import functional as F\n","from torchvision.datasets import FashionMNIST\n","\n","# __________end of block__________"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xcwlqT5vjivs"},"outputs":[],"source":["# do not change the code in the block below\n","# __________start of block__________\n","def get_predictions(model, eval_data, step=10):\n","\n","    predicted_labels = []\n","    model.eval()\n","    with torch.no_grad():\n","        for idx in range(0, len(eval_data), step):\n","            y_predicted = model(eval_data[idx : idx + step].to(device))\n","            predicted_labels.append(y_predicted.argmax(dim=1).cpu())\n","\n","    predicted_labels = torch.cat(predicted_labels)\n","    predicted_labels = \",\".join([str(x.item()) for x in list(predicted_labels)])\n","    return predicted_labels\n","\n","\n","def get_accuracy(model, data_loader):\n","    predicted_labels = []\n","    real_labels = []\n","    model.eval()\n","    with torch.no_grad():\n","        for batch in data_loader:\n","            y_predicted = model(batch[0].to(device))\n","            predicted_labels.append(y_predicted.argmax(dim=1).cpu())\n","            real_labels.append(batch[1])\n","\n","    predicted_labels = torch.cat(predicted_labels)\n","    real_labels = torch.cat(real_labels)\n","    accuracy_score = (predicted_labels == real_labels).type(torch.FloatTensor).mean()\n","    return accuracy_score\n","\n","\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"pPCD5F-Ujivt"},"source":["Загрузите файл `hw_overfitting_data_dict.npy` (ссылка есть на странице с заданием), он понадобится для генерации посылок. Код ниже может его загрузить (но в случае возникновения ошибки скачайте и загрузите его вручную).\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vCTiCrbfjivv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744295179715,"user_tz":-180,"elapsed":608,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"c8ca6c2a-0d01-48b1-973a-e49abbacf54f"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-04-10 14:26:18--  https://github.com/girafe-ai/ml-course/raw/24f_ysda/homeworks/hw_overfitting/hw_overfitting_data_dict\n","Resolving github.com (github.com)... 140.82.116.3\n","Connecting to github.com (github.com)|140.82.116.3|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://raw.githubusercontent.com/girafe-ai/ml-course/24f_ysda/homeworks/hw_overfitting/hw_overfitting_data_dict [following]\n","--2025-04-10 14:26:19--  https://raw.githubusercontent.com/girafe-ai/ml-course/24f_ysda/homeworks/hw_overfitting/hw_overfitting_data_dict\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 6272446 (6.0M) [application/octet-stream]\n","Saving to: ‘hw_overfitting_data_dict.npy’\n","\n","hw_overfitting_data 100%[===================>]   5.98M  --.-KB/s    in 0.07s   \n","\n","2025-04-10 14:26:19 (82.7 MB/s) - ‘hw_overfitting_data_dict.npy’ saved [6272446/6272446]\n","\n"]}],"source":["!wget https://github.com/girafe-ai/ml-course/raw/24f_ysda/homeworks/hw_overfitting/hw_overfitting_data_dict -O hw_overfitting_data_dict.npy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"az_hrIG6jivw"},"outputs":[],"source":["# do not change the code in the block below\n","# __________start of block__________\n","assert os.path.exists(\n","    \"hw_overfitting_data_dict.npy\"\n","), \"Please, download `hw_overfitting_data_dict.npy` and place it in the working directory\"\n","\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"zeA6Q5-CgSq7"},"source":["Вернемся к задаче распознавания простых изображений, рассмотренной ранее. Но теперь будем работать с набором данных [FashionMNIST](https://github.com/zalandoresearch/fashion-mnist). В данном задании воспользуемся всем датасетом целиком.\n","\n","__Ваша первая задача: реализовать весь пайплан обучения модели и добиться качества $\\geq 88.5\\%$ на тестовой выборке.__\n","\n","Код для обучения модели в данном задании отсутствует. Присутствует лишь несколько тестов, которые помогут вам отладить свое решение. За примером можно обратиться к ноутбукам с предыдущих занятий."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tyLaUu9djivz"},"outputs":[],"source":["CUDA_DEVICE_ID = 0  # change if needed"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nPG1KbQAgl8b"},"outputs":[],"source":["# do not change the code in the block below\n","# __________start of block__________\n","device = (\n","    torch.device(f\"cuda:{CUDA_DEVICE_ID}\") if torch.cuda.is_available() else torch.device(\"cpu\")\n",")\n","# __________end of block__________"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aYcL28OsgSq8","colab":{"base_uri":"https://localhost:8080/","height":470},"executionInfo":{"status":"ok","timestamp":1744295198541,"user_tz":-180,"elapsed":467,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"a4d97783-9146-4eaa-9e6b-f28bfc064146"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Image label: 9')"]},"metadata":{},"execution_count":37},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","\n","train_fmnist_data = FashionMNIST(\n","    \".\", train=True, transform=torchvision.transforms.ToTensor(), download=True\n",")\n","test_fmnist_data = FashionMNIST(\n","    \".\", train=False, transform=torchvision.transforms.ToTensor(), download=True\n",")\n","\n","\n","train_data_loader = torch.utils.data.DataLoader(\n","    train_fmnist_data, batch_size=32, shuffle=True, num_workers=2\n",")\n","\n","test_data_loader = torch.utils.data.DataLoader(\n","    test_fmnist_data, batch_size=32, shuffle=False, num_workers=2\n",")\n","\n","random_batch = next(iter(train_data_loader))\n","_image, _label = random_batch[0][0], random_batch[1][0]\n","plt.figure()\n","plt.imshow(_image.reshape(28, 28))\n","plt.title(f\"Image label: {_label}\")\n","# __________end of block__________"]},{"cell_type":"code","source":["random_batch = next(iter(train_data_loader))\n","_image, _label = random_batch[0][0], random_batch[1][0]\n","plt.figure()\n","plt.imshow(_image.reshape(28, 28))\n","plt.title(f\"Image label: {_label}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"id":"FniVZwx1nbtu","executionInfo":{"status":"ok","timestamp":1744295201655,"user_tz":-180,"elapsed":369,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"294a6af7-78ec-463b-d165-b1424d4339a7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Image label: 1')"]},"metadata":{},"execution_count":38},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(random_batch[0].size(), random_batch[1].size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G5ztFivVnhiC","executionInfo":{"status":"ok","timestamp":1744295206496,"user_tz":-180,"elapsed":36,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"d2a6d7b8-ebea-4e26-a828-7a2506277c03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([32, 1, 28, 28]) torch.Size([32])\n"]}]},{"cell_type":"markdown","metadata":{"id":"S6jWRv1rgSq8"},"source":["Постройте модель ниже. Пожалуйста, не стройте переусложненную сеть, не стоит делать ее глубже четырех слоев (можно и меньше). Ваша основная задача – обучить модель и получить качество на отложенной (тестовой выборке) не менее 88.5% accuracy.\n","\n","__Внимание, ваша модель должна быть представлена именно переменной `model_task_1`. На вход ей должен приходить тензор размерностью (1, 28, 28).__"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BcyEFX-RgSq8"},"outputs":[],"source":["# Creating model instance\n","model_task_1 = None\n","# your code here"]},{"cell_type":"code","source":["class MLP(nn.Module):\n","  def __init__(self) -> None:\n","      super(MLP, self).__init__()\n","      self.fc1 = nn.Linear(784, 196)\n","      self.fc2 = nn.Linear(196, 100)\n","      self.fc3 = nn.Linear(100, 10)\n","      self.relu = nn.ReLU()\n","\n","  def forward(self, x):\n","      x = x.view(-1, 28*28)\n","      x = self.relu(self.fc1(x))\n","      x = self.relu(self.fc2(x))\n","      x = self.fc3(x)\n","      return x\n","\n","model_task_1 = MLP()"],"metadata":{"id":"qj73dEl1CCbQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bAoLV4dkoy5M"},"source":["Не забудьте перенести модель на выбранный `device`!"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xas9SIXDoxvZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744295214302,"user_tz":-180,"elapsed":30,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"1aeca0f4-9fe9-4dba-a01b-e0d18102c0b1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLP(\n","  (fc1): Linear(in_features=784, out_features=196, bias=True)\n","  (fc2): Linear(in_features=196, out_features=100, bias=True)\n","  (fc3): Linear(in_features=100, out_features=10, bias=True)\n","  (relu): ReLU()\n",")"]},"metadata":{},"execution_count":41}],"source":["model_task_1.to(device)"]},{"cell_type":"markdown","metadata":{"id":"6pLRWysggSq9"},"source":["Локальные тесты для проверки вашей модели доступны ниже:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_qMQzo1ggSq9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744295216765,"user_tz":-180,"elapsed":25,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"f42046a2-af58-44ae-ad10-c71ec5a461b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Everything seems fine!\n"]}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","assert model_task_1 is not None, \"Please, use `model_task_1` variable to store your model\"\n","\n","try:\n","    x = random_batch[0].to(device)\n","    y = random_batch[1].to(device)\n","\n","    # compute outputs given inputs, both are variables\n","    y_predicted = model_task_1(x)\n","except Exception as e:\n","    print(\"Something is wrong with the model\")\n","    raise e\n","\n","\n","assert y_predicted.shape[-1] == 10, \"Model should predict 10 logits/probas\"\n","\n","print(\"Everything seems fine!\")\n","# __________end of block__________"]},{"cell_type":"code","source":["import torch.optim as optim"],"metadata":{"id":"inVAy_ssDvBf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"suRmIPwIgSq9"},"source":["Настройте параметры модели на обучающей выборке. Также рекомендуем поработать с `learning rate`."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YJnU14bdnZa_"},"outputs":[],"source":["loss_cross = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model_task_1.parameters(), lr = 0.001)"]},{"cell_type":"code","source":["for epoch in range(20):\n","  for i in train_data_loader:\n","    optimizer.zero_grad()\n","\n","    predict = model_task_1(i[0].to(device))\n","\n","    loss = loss_cross(predict, i[1].to(device))\n","\n","    loss.backward()\n","\n","    optimizer.step()\n","  print(f\"epoch: {epoch}, loss: {loss.item():.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dH8vZTZ1D3zj","executionInfo":{"status":"ok","timestamp":1744295738696,"user_tz":-180,"elapsed":204870,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"a1ae58cd-6eaf-4847-86e9-fe8eb244f9ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["epoch: 0, loss: 0.3889\n","epoch: 1, loss: 0.2498\n","epoch: 2, loss: 0.3563\n","epoch: 3, loss: 0.3229\n","epoch: 4, loss: 0.3629\n","epoch: 5, loss: 0.1681\n","epoch: 6, loss: 0.4859\n","epoch: 7, loss: 0.2139\n","epoch: 8, loss: 0.3140\n","epoch: 9, loss: 0.3108\n","epoch: 10, loss: 0.2576\n","epoch: 11, loss: 0.1629\n","epoch: 12, loss: 0.0494\n","epoch: 13, loss: 0.2366\n","epoch: 14, loss: 0.0448\n","epoch: 15, loss: 0.1552\n","epoch: 16, loss: 0.1897\n","epoch: 17, loss: 0.2084\n","epoch: 18, loss: 0.0938\n","epoch: 19, loss: 0.1477\n"]}]},{"cell_type":"markdown","metadata":{"id":"2zce7gt1gSq-"},"source":["Также, напоминаем, что в любой момент можно обратиться к замечательной [документации](https://pytorch.org/docs/stable/index.html) и [обучающим примерам](https://pytorch.org/tutorials/).  "]},{"cell_type":"markdown","metadata":{"id":"usswrWYOgSq-"},"source":["Оценим качество классификации:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xua3TVZHgSq-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744295805283,"user_tz":-180,"elapsed":8768,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"a8b74048-dba1-40f4-a3ed-ec9f99c70e0a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Neural network accuracy on train set: 0.94027\n"]}],"source":["train_acc_task_1 = get_accuracy(model_task_1, train_data_loader)\n","print(f\"Neural network accuracy on train set: {train_acc_task_1:3.5}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l9KEKXBxgSq-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744295811616,"user_tz":-180,"elapsed":1604,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"a7ae8675-24c3-4c30-acd0-e39d28066abf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Neural network accuracy on test set: 0.889\n"]}],"source":["test_acc_task_1 = get_accuracy(model_task_1, test_data_loader)\n","print(f\"Neural network accuracy on test set: {test_acc_task_1:3.5}\")"]},{"cell_type":"markdown","metadata":{"id":"4oyhmMobgSq_"},"source":["Проверка, что необходимые пороги пройдены:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OAIrURCEgSq_"},"outputs":[],"source":["assert test_acc_task_1 >= 0.885, \"Train accuracy is below 0.885 threshold\"\n","assert (\n","    train_acc_task_1 >= 0.905\n","), \"Train accuracy is below 0.905 while test accuracy is fine. We recommend to check your model and data flow\""]},{"cell_type":"markdown","metadata":{"id":"MrPrg1cSjiwB"},"source":["Обращаем внимане, код ниже предполагает, что ваша модель имеет содержится в переменной `model_task_1`, а файл `hw_fmnist_data_dict.npy` находится в той же директории, что и ноутбук (он доступен в репозитории)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X87iedgjjiwB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744295999816,"user_tz":-180,"elapsed":40,"user":{"displayName":"Андрей Власов","userId":"01697232066014171870"}},"outputId":"df1b1770-1492-42b2-ae51-dee1472b5dc5"},"outputs":[{"output_type":"stream","name":"stdout","text":["File saved to `submission_dict_fmnist_task_1.json`\n"]}],"source":["# do not change the code in the block below\n","# __________start of block__________\n","assert os.path.exists(\n","    \"hw_fmnist_data_dict.npy\"\n","), \"Please, download `hw_fmnist_data_dict.npy` and place it in the working directory\"\n","\n","loaded_data_dict = np.load(\"hw_fmnist_data_dict.npy\", allow_pickle=True)\n","\n","submission_dict = {\n","    \"train_predictions_task_1\": get_predictions(\n","        model_task_1, torch.FloatTensor(loaded_data_dict.item()[\"train\"])\n","    ),\n","    \"test_predictions_task_1\": get_predictions(\n","        model_task_1, torch.FloatTensor(loaded_data_dict.item()[\"test\"])\n","    ),\n","}\n","\n","with open(\"submission_dict_fmnist_task_1.json\", \"w\") as iofile:\n","    json.dump(submission_dict, iofile)\n","print(\"File saved to `submission_dict_fmnist_task_1.json`\")\n","# __________end of block__________"]},{"cell_type":"markdown","metadata":{"id":"PG7oHGCHjiwB"},"source":["### Сдача задания\n","Сдайте сгенерированный файл в соответствующую задачу в соревновании, а именно:\n","    \n","* `submission_dict_fmnist_task_1.json` в задачу Separation"]},{"cell_type":"markdown","metadata":{"id":"OtWnYAN_gSrA"},"source":["На этом задание завершено. Поздравляем!"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"https://github.com/girafe-ai/ml-course/blob/25s_ml_trainings_3/homeworks/hw01_classification/02_hw_fmnist_classification.ipynb","timestamp":1744269366891}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.19"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"vscode":{"interpreter":{"hash":"21499ab2a6726e29f7050b76af0e9680227e613293d630ba279de7ebdfad9cae"}}},"nbformat":4,"nbformat_minor":0}